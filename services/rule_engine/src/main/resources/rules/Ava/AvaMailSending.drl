package rules.Ava;

import java.lang.string.*; 
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.Map;
import java.util.Date;
import java.time.LocalDateTime;
import java.text.SimpleDateFormat;


import org.apache.commons.lang3.StringUtils;

import com.mindsmiths.emailAdapter.EmailAdapterAPI;
import com.mindsmiths.emailAdapter.SendEmailPayload;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.sdk.utils.templating.Templating;
import com.mindsmiths.mitems.Mitems;
import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;

import agents.CultureMaster;
import agents.Ava;


rule "Working hours"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * MON-FRI *", ts, "Europe/Zagreb"))
        agent: Ava()
    then
        modify(agent) {
            setWorkingHours(true)
        }
        Log.info("*********");
end

rule "Non working hours"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(!evaluateCronExpression("* * 8-17 ? * MON-FRI *", ts, "Europe/Zagreb"))
        agent: Ava()
    then
        modify(agent) {
            setWorkingHours(false)
        }
         Log.info("*********");
end

/* rule "First weekly mail sending"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        //eval(evaluateCronExpression("* * 8-17 ? * FRI *", ts, "Europe/Zagreb"))
        agent: Ava()
    then
        modify(agent) {}

        Log.info("**********");
        Log.info("I live!");
        Log.info("**********");

        String subject = Mitems.getText("onboarding.welcome-email.subject");
        String description = Mitems.getText("onboarding.welcome-email.description");
        String htmlTemplate = String.join("", Files.readAllLines(Paths.get("EmailTemplate.html"), StandardCharsets.UTF_8));

        String htmlBody = Templating.recursiveRender(htmlTemplate, Map.of(
            "description", description,
            "callToAction", "Let's go",
            "armoryUrl", "http://8000.workspace-ms-197475909.sandbox.mindsmiths.io/"
        ));

        SendEmailPayload e = new SendEmailPayload();
        e.setRecipients(List.of("filipbacic08@gmail.com"));
        e.setSubject(subject);
        e.setHtmlText(htmlBody);
        EmailAdapterAPI.newEmail(e); 
end */

rule "Match mail sending"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(matchedWithEmailSentAt == null || matchedWithEmailSentAt before[1d] ts)
    then
        modify(agent) {
            setMatchedWithEmailSentAt(ts)
        };
        Date matchingDate = new Date();
        Log.info(matchingDate.toString());

        Ava ava1 = new Ava();
        ava1.addConnection("email", "filipbacic08+1@gmail.com");
        agent.addConnection("email", "filipbacic08+2@gmail.com");
        Log.info("*********");
        Log.info(" I am matching mail! ");
        Log.info("*********");

        // if(agent.getId().compareTo(ava1.getId()) < 0) {
            agent.sendCalendarInvite(matchingDate, ava1);
        //}
        
        /*
        String subjectMatching = Mitems.getText("onboarding.matching-mail.subjectname");
        String descriptionMatching = Mitems.getText("onboarding.matching-mail.description");
        String htmlTemplateMatching = String.join("", Files.readAllLines(Paths.get("EmailTemplateCalendar.html"), StandardCharsets.UTF_8));

        String htmlBodyMatching = Templating.recursiveRender(htmlTemplateMatching, Map.of(
            "title", subjectMatching,
            "biggerTitle", descriptionMatching,
            "callToAction", "Integrate to calendar",
            "armoryUrl", "http://8000.workspace-ms-197475909.sandbox.mindsmiths.io/"
        ));

        SendEmailPayload e = new SendEmailPayload();
        e.setRecipients(List.of("filipbacic08@gmail.com"));
        e.setSubject(subjectMatching);
        e.setHtmlText(htmlBodyMatching);
        EmailAdapterAPI.newEmail(e);
        */
end

