package rules.cultureMaster;

import agents.CultureMaster;
import signals.PairingRequest;
import models.CmLunchCycleStage;
import com.mindsmiths.pairingalgorithm.Matches;
import com.mindsmiths.employeeManager.ManualTriggerEvent;


rule "Force lunch cycle start"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {
            setLunchCycleStage(CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES),
            deleteLunchCycleDataOnAvas()
        };
        delete(signal);
end

rule "Generate matches"
    when
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES, pairingInterval == true)
    then
        modify(agent) {
            setLunchCycleStage(CmLunchCycleStage.COLLECT_GENERATED_MATCHES),
            generateMatches()
        }
end

rule "Send generated matches"
    when
        generatedMatches: Matches(allMatches: allMatches) from entry-point "signals"
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_GENERATED_MATCHES)
    then
        modify(agent) {
            sendMatches(allMatches)
        }
        delete(generatedMatches);
end

rule "Reset lunch cycle"
    when
       agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_GENERATED_MATCHES, pairingInterval == false)
    then
        modify(agent){
            resetLunchCycle()
        }
end