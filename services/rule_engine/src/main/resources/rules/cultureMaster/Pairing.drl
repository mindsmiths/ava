package rules.cultureMaster;

import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.pairingalgorithm.Matches;
import com.mindsmiths.pairingalgorithm.LunchCompatibilities;

import signals.EmployeeConnectionStrengthsSignal;
import signals.EmployeeAvailabilitySignal;

import agents.CultureMaster;
import models.CmLunchCycleStage;

rule "Store Employee availability"
    when
        signal: EmployeeAvailabilitySignal(employeeAvailability: employeeAvailability) from entry-point "signals"
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES)
    then
        modify(agent) {addEmployeeAvailability(employeeAvailability)};
        delete(signal);
end

rule "Store employee connection strengths"
    when
        signal: EmployeeConnectionStrengthsSignal(employeeId: employeeId, connectionStrengths: connectionStrengths) from entry-point "signals"
        agent: CultureMaster(employeeConnectionStrengths: employeeConnectionStrengths)
    then
        employeeConnectionStrengths.put(employeeId, connectionStrengths);
        update(agent);
        delete(signal);
end

rule "Store generated matches"
    when
        generatedMatches: Matches(allMatches: allMatches) from entry-point "signals"
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_GENERATED_MATCHES)
    then
        modify(agent) {
            addMatches(allMatches),
            setLunchCycleStage(CmLunchCycleStage.SEND_TO_AVAS)};
        delete(generatedMatches);
end

rule "Send match info to Ava agents"
    when 
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.SEND_TO_AVAS)
    then
        agent.sendMatches();
        modify(agent) {
            setLunchCycleStage(CmLunchCycleStage.FINISHED),
            clearEmployeeAvailabilities()};
end

rule "Reset lunch cycle"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: CultureMaster(lunchCycleStage != CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES)
        eval(evaluateCronExpression("* * 18-19 ? * FRI *", ts, "Europe/Zagreb"))
    then
        modify(agent) {setLunchCycleStage(CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES)};
end 

rule "Store lunch compatibilities"
    when
        signal: LunchCompatibilities() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {setLunchCompatibilities(signal)};
end