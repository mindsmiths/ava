package rules.cultureMaster;

import com.mindsmiths.employeeManager.ManualTriggerEvent;
import com.mindsmiths.ruleEngine.util.Log;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.employeeManager.employees.Employee;

import com.mindsmiths.ruleEngine.util.Agents;
import agents.CultureMaster;
import signals.EmployeeUpdateSignal;
import models.CmLunchCycleStage;
import com.mindsmiths.sdk.core.api.DataChangeType;
import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
import agents.Ava;

rule "Update employee data"
    when
        signal: EmployeeUpdateSignal(agentId: agentId, employee: employee) from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {
            addOrUpdateEmployee(agentId, employee),
            sendEmployeesToAva(signal)
        };
        delete(signal);
end

rule "Trigger lunch cycle for CultureMaster"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_cycle") from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {setLunchCycleStage(CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES)};
        delete(signal);
end

rule "Lunch pairing"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 16-17 ? * FRI *", ts, "Europe/Zagreb"))
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES 
                || lunchCycleStage == null)
    then
        modify(agent) {setLunchCycleStage(CmLunchCycleStage.COLLECT_GENERATED_MATCHES)};
        agent.generateMatches();
end

rule "Trigger lunch pairing for CultureMaster"
    when
        signal: ManualTriggerEvent(triggerType == "lunch_pairing") from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {setLunchCycleStage(CmLunchCycleStage.COLLECT_GENERATED_MATCHES)};
        agent.generateMatches();
        delete(signal);
end