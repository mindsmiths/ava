package rules.cultureMaster;

import agents.CultureMaster;
import signals.EmployeeUpdateSignal;
import models.CmLunchCycleStage;
import com.mindsmiths.pairingalgorithm.LunchCompatibilities
import signals.PairingRequest


rule "Update employee data"
    when
        signal: EmployeeUpdateSignal() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) { addOrUpdateEmployee(signal) }
        delete(signal);
end

rule "Store employee pairing data"
    when
        signal: PairingRequest(empAvailability: employeeAvailability, connStrengths: connectionStrengths) from entry-point "signals"
        agent: CultureMaster(lunchCycleStage == CmLunchCycleStage.COLLECT_AVA_AVAILABILITIES, employeeConnectionStrengths: employeeConnectionStrengths)
    then
        modify(agent) {
            addEmployeeAvailability(empAvailability),
            employeeConnectionStrengths.put(signal.getFrom(), connStrengths)
        }
        delete(signal);
end

rule "Store lunch compatibilities"
    when
        signal: LunchCompatibilities() from entry-point "signals"
        agent: CultureMaster()
    then
        modify(agent) {setLunchCompatibilities(signal)};
end