package rules.ava;

import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.armory.event.UserConnectedEvent;
import com.mindsmiths.armory.event.SubmitEvent;
import com.mindsmiths.sdk.utils.templating.*;
import com.mindsmiths.employeeManager.employees.Employee;
import com.mindsmiths.emailAdapter.SendEmailPayload;
import com.mindsmiths.ruleEngine.util.Log;

import java.util.List;
import java.util.Map;

import signals.EmployeeUpdateSignal;
import com.mindsmiths.armory.template.BaseTemplate;

import agents.Ava;
import agents.CultureMaster;
import models.EmployeeProfile;
import models.OnboardingStage;
import models.OnboardingTemplates;

rule "Send onboarding email"
    when
        agent: Ava(workingHours == true, onboardingStage == OnboardingStage.AVA_CREATED)
        employee: EmployeeProfile()
    then
        /*SendEmailPayload email = OnboardingTemplates.welcomeEmail(
                employee,
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);*/
        Log.warn("ONBOARDING");
        modify(agent) {setOnboardingStage(OnboardingStage.WELCOME_EMAIL_SENT)};
end

rule "Start or reconnect familiarity quiz"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-onboarding") from entry-point "signals"
        agent: Ava(onboardingStage in (OnboardingStage.WELCOME_EMAIL_SENT, OnboardingStage.FAMILIARITY_QUIZ))
   then
        Map<String, BaseTemplate> screens = OnboardingTemplates
                .familiarityQuizScreens(agent.createOtherEmployeeNames());
        agent.showScreens("introScreen", screens);
        modify(agent) {setOnboardingStage(OnboardingStage.FAMILIARITY_QUIZ)};
        delete(signal);
end

rule "Store familiarity answers"
   when
        signal: SubmitEvent(getParamAsString("submit") == "finish-familiarity-quiz") from entry-point "signals"
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FAMILIARITY_QUIZ)
        employee: EmployeeProfile(familiarity: familiarity)
   then
        for (String paramId : signal.getParams().keySet())
            if (paramId.startsWith("answers"))
                for (String em : (List<String>) signal.getParam(paramId))
                    employee.getFamiliarity().put(em, (Double) familiarity.getOrDefault(em, 0.0) + 1.0);
        update(employee)
        modify(agent) {
            setOnboardingStage(OnboardingStage.FINISHED),
            chargeConnectionNeurons(employee)};
        agent.send(CultureMaster.ID, new EmployeeUpdateSignal(employee));
        agent.logEvent("Onboarding Finished", Map.of("employeeId", employee.getId(),
                "familiarity", familiarity, "full name", employee.getFullName()));
end

rule "Reconnect final screen"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-onboarding") from entry-point "signals"
        agent: Ava(onboardingStage == OnboardingStage.FINISHED)
   then
        BaseTemplate screen = OnboardingTemplates.finalScreen();
        agent.showScreen(screen);
        delete(signal);
end