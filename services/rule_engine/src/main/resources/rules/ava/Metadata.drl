package rules.ava;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.employeeManager.employees.Employee;

import agents.Ava;

import models.OnboardingStage
import models.LunchCycleData

rule "Set working hours"
    salience 500
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * MON-FRI *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours != true)
    then
        modify(agent) {setWorkingHours(true)}
end

rule "Set non working hours"
    salience 500
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(!evaluateCronExpression("* * 8-17 ? * MON-FRI *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours != false)
    then
        modify(agent) {setWorkingHours(false)};
end

rule "Set availability interval"
    salience 500
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(interval: availabilityInterval, availabilityInterval !=
                   anyCronSatisfied(ts, "Europe/Zagreb", "* * 8-23 ? * WED", "* * * ? * THU", "* * 00-16 ? * FRI"))
    then
        modify(agent) {setAvailabilityInterval(!interval)};
end

rule "Set onboarded"
    salience 500
    when
        agent: Ava(onboarded == false, onboardingStage == OnboardingStage.FINISHED)
        profile: Employee(active == true)
    then
        modify(agent) {setOnboarded(true)};
end

rule "Unset onboarded"
    salience 500
    when
        agent: Ava(onboarded == true)
        profile: Employee(active == false)
    then
        modify(agent) {setOnboarded(false)};
end

rule "Set can send mail"
    salience 500
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        lunchCycleData: LunchCycleData(canSend: canSendMail, canSendMail == sentMailRecently(ts))
    then
        modify(lunchCycleData) {setCanSendMail(!canSend)};
end
