package rules.ava;

import com.mindsmiths.employeeManager.employees.Employee;
import com.mindsmiths.sdk.utils.Utils;
import com.mindsmiths.ruleEngine.util.Agents;

import signals.EmployeeUpdateSignal;
import signals.AllEmployees;
import signals.EmployeeConnectionStrengthsSignal;

import agents.CultureMaster;
import agents.Ava;

import models.OnboardingStage;

rule "Create new employee"
    when
        newEmployee: EmployeeUpdateSignal(email: employee.email, employee: employee) from entry-point "signals"
        agent: Ava(onboardingStage == null)
    then
        modify(agent) {
            addConnection("email", email),
            addConnection("armory", Utils.randomGenerator()),
            setOnboardingStage(OnboardingStage.AVA_CREATED)};
        insert(employee);
        delete(newEmployee);
end

rule "Update existing employee"
    when
        employeeSignal: EmployeeUpdateSignal(profile: employee, email: employee.email) from entry-point "signals"
        employee: Employee()
        agent: Ava(onboardingStage != null)
    then
        delete(employee);
        delete(employeeSignal);
        modify(agent) {addConnection("email", email)};
        insert(profile);
        agent.send(CultureMaster.ID, new EmployeeUpdateSignal(profile));
end

rule "Update other employees data"
    when
        signal: AllEmployees(allEmployees: allEmployees) from entry-point "signals"
        agent: Ava()
        employee: Employee()
    then
        allEmployees.remove(agent.getId());
        modify(agent) {
            setOtherEmployees(allEmployees),
            addConnectionStrengths()};
        agent.send(CultureMaster.ID, new EmployeeConnectionStrengthsSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue()));
        delete(signal);
end