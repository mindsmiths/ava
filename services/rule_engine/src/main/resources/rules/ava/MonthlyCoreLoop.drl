package rules.ava;

import com.mindsmiths.sdk.utils.templating.*;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.ruleEngine.model.Heartbeat;
import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
import com.mindsmiths.employeeManager.employees.Employee;
import com.mindsmiths.armory.event.UserConnectedEvent;
import com.mindsmiths.armory.event.SubmitEvent;

import agents.Ava;

import models.EmployeeProfile;
import models.MonthlyCoreStage;
import models.MonthlyCoreTemplates;
import models.MonthlyCoreData

import java.util.Map;
import java.util.List
import models.OnboardingStage;

rule "Send monthly core email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * 2#1 *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours == true, onboardingStage == OnboardingStage.FINISHED)
        employee: EmployeeProfile()
        not MonthlyCoreData()
    then
        agent.sendEmail(MonthlyCoreTemplates.monthlyCoreEmail(employee, agent.getConnection("armory"),
                                    agent.getConnection("email")));
        insert(new MonthlyCoreData());
end

rule "Manuel Send monthly core email"
    when
        monthlyCoreData: MonthlyCoreData(manualTrigger == true) 
        agent: Ava(workingHours == true)
        employee: EmployeeProfile()
    then
        agent.sendEmail(MonthlyCoreTemplates.monthlyCoreEmail(employee, agent.getConnection("armory"),
                                    agent.getConnection("email")));
        modify(monthlyCoreData){setManualTrigger(false)}
end

rule "Start and reconnect monthly quiz"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-monthly-core") from entry-point "signals"
        agent: Ava()
        monthlyCoreData: MonthlyCoreData(monthlyCoreStage in (MonthlyCoreStage.EMAIL_SENT, MonthlyCoreStage.FAMILIARITY_QUIZ))
        employee: EmployeeProfile()
   then
        agent.showScreens("introScreen", MonthlyCoreTemplates.monthlyQuizScreens(agent.createOtherEmployeeNames()));
        modify(monthlyCoreData) {setMonthlyCoreStage(MonthlyCoreStage.FAMILIARITY_QUIZ)};
        delete(signal);
end

rule "Store monthly core answers"
   when
        signal: SubmitEvent(getParamAsString("submit") == "finish-monthly-quiz") from entry-point "signals"
        monthlyCoreData: MonthlyCoreData(monthlyCoreStage == MonthlyCoreStage.FAMILIARITY_QUIZ)
        employee: EmployeeProfile(familiarity : familiarity)
   then
        for (String paramId : signal.getParams().keySet()) 
            if (paramId.startsWith("answers"))
                for (String em : (List<String>) signal.getParam(paramId))
                    employee.getFamiliarity().put(em, (Double) familiarity.getOrDefault(em, 0.0) + 1.0);

        update(employee)
        modify(monthlyCoreData) {setMonthlyCoreStage(MonthlyCoreStage.FINISHED)};
        delete(signal);
end

rule "Reconnect monthly core final screen"
   when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-monthly-core") from entry-point "signals"
        agent: Ava()
        monthlyCoreData: MonthlyCoreData(monthlyCoreStage == MonthlyCoreStage.FINISHED)
   then
        agent.showScreen(MonthlyCoreTemplates.finalScreen());
        delete(signal);
end

rule "Reset monthly core loop"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * 4#1 *", ts, "Europe/Zagreb"))
        monthlyCoreData: MonthlyCoreData()
    then
     delete(monthlyCoreData);
end