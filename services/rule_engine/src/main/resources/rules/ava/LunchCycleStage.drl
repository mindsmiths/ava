package rules.ava;

import java.util.*;
import agents.Ava;
import agents.CultureMaster;
import models.WeeklyCoreTemplates;
import models.LunchCycleData
import signals.PairingRequest;
import signals.SendMatchesSignal;
import signals.DeleteLunchCycleDataSignal;
import com.mindsmiths.armory.event.UserConnected
import com.mindsmiths.armory.event.Submit
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.pairingalgorithm.Days;
import com.mindsmiths.pairingalgorithm.EmployeeAvailability;
import com.mindsmiths.employeeManager.employees.Employee;


import com.mindsmiths.ruleEngine.util.Log
import com.mindsmiths.sdk.utils.Utils
import models.CronTime


rule "Create Lunch Cycle data"
    when
        agent: Ava(onboarded == true, availabilityInterval == true)
        not LunchCycleData()
    then
        modify(agent) {
            decayConnectionNeurons()
        };
        insert(new LunchCycleData());
end

rule "Delete lunch cycle data"
    when
        Ava(availabilityInterval == false)
        lunchCycleData: LunchCycleData()
    then
        delete(lunchCycleData);
end

rule "Manually delete lunch cycle data"
    when
        signal: DeleteLunchCycleDataSignal() from entry-point "signals"
        lunchCycleData: LunchCycleData()
    then
        delete(signal);
        delete(lunchCycleData);
end

rule "Send available days email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(workingHours == true, onboarded == true)
        lunchCycleData: LunchCycleData(canSendMail == true, userResponded == false, count: mailsSent)
        employee: Employee()
    then
        agent.sendEmail(WeeklyCoreTemplates.weeklyEmail(employee, count, agent.getConnection("armory"),
                                                        agent.getConnection("email")));
        modify(lunchCycleData){
            setAvailableDaysEmailLastSentAt(ts),
            setMailsSent(count + 1),
            setCanSendMail(false)
        }
end

rule "Ask for available days"
    when
        signal: UserConnected(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(onboarded == true)
        employee: Employee()
        lunchCycleData: LunchCycleData(userResponded == false)
    then
        agent.showScreen(WeeklyCoreTemplates.availableDaysScreen());
        delete(signal);
end

rule "User selected days"
    when
        signal: Submit(buttonId == "confirm-days", getParam("available-days") != null, availableDays : getParamAsList("available-days", String.class)) from entry-point "signals"
        lunchCycleData: LunchCycleData()
        agent: Ava(onboarded == true)
    then
        modify(lunchCycleData){
            updateAvailableDays(availableDays)
        }
        delete(signal);
end

rule "Confirm days"
    when
        lunchCycleData: LunchCycleData(availableDays: availableDays != null, availableDays.size() > 0, userResponded == false)
        agent: Ava(onboarded == true, connectionStrengths: getConnectionStrengthAsValue(), agentId: id)
    then
        agent.showScreens("confirm-screen", WeeklyCoreTemplates.confirmingDaysScreen());
        modify(lunchCycleData){
            setUserResponded(true)
        }
        agent.send(CultureMaster.ID, new PairingRequest(new EmployeeAvailability(agentId, availableDays), connectionStrengths));
end

rule "No days selected"
    when
        lunchCycleData: LunchCycleData(availableDays != null, availableDays.size() == 0, noDaysSelected == false)
        agent: Ava(onboarded == true)
    then
        modify(lunchCycleData){
            setNoDaysSelected(true)
        }
        agent.showScreens("lunch-decline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
end

rule "Lunch decline reason screen"
    when
        signal: UserConnected(getParamAsString("trigger") == "start-lunch-decline-reason-screen") from entry-point "signals"
        agent: Ava(onboarded == true)
        lunchCycleData: LunchCycleData(userResponded == false)
    then 
        agent.showScreens("lunch-decline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
        delete(signal);
end

rule "Finish lunch decline form"
   when
        signal: Submit(buttonId == "finished-lunch-decline-form") from entry-point "signals"
        agent: Ava(onboarded == true, lunchDeclineReasons : lunchDeclineReasons)
        lunchCycleData: LunchCycleData(userResponded == false)
   then
        modify(lunchCycleData){ setUserResponded(true) }
        lunchDeclineReasons.put(Utils.datetimeToStr(Utils.now()), signal.getParamAsString("answer"));
        delete(signal);
end

rule "Send calendar invite"
    when
        signal: SendMatchesSignal(match : match != null, matchDay : matchDay) from entry-point "signals"
        agent: Ava(onboarded == true, otherEmployees : otherEmployees)
        employee: Employee()
    then
        modify(agent){chargeAfterMatch(match)}
        agent.sendEmail(WeeklyCoreTemplates.calendarInviteEmail(matchDay, employee, (Employee) otherEmployees.get(match)));
        delete(signal);
end

rule "Send no match email"
    when
        signal: SendMatchesSignal(match == null) from entry-point "signals"
        agent: Ava(onboarded == true)
    then
        agent.sendEmail(WeeklyCoreTemplates.noMatchEmail(agent.getConnection("email")));
        delete(signal);
end

//rule "Auto assign days"
//    when
//        Heartbeat(ts: timestamp) from entry-point "signals"
//        agent: Ava(agentId: id, onboarded == true, CronTime.AFTER_AVAILABILITY_INTERVAL.isSatisfied(ts),
//                   connectionStrengths: getConnectionStrengthAsValue())
//        lunchCycleData: LunchCycleData(mailsSent > 0, availableDays == null, userResponded == false)
//    then
//        agent.send(CultureMaster.ID, new PairingRequest(new EmployeeAvailability(agentId, Arrays.asList(Days.values())), connectionStrengths));
//        modify(lunchCycleData){
//            setUserResponded(true)
//        }
//end

rule "User already declined or confirmed available days"
    when 
        signal: UserConnected(getParamAsString("trigger") in ("start-lunch-decline-reason-screen", "start-weekly-core")) from entry-point "signals"
        agent: Ava(onboarded == true)
        LunchCycleData(userResponded == true)
    then
        agent.showScreen(WeeklyCoreTemplates.userAlreadyRespondedScreen());
        delete(signal);
end

rule "Lunch invite expired"
    when
        signal: UserConnected(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(onboarded == true)
        not LunchCycleData()
    then 
        agent.showScreen(WeeklyCoreTemplates.lunchInviteExpiredScreen());
        delete(signal);
end