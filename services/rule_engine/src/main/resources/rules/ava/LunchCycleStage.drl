package rules.ava;

import java.util.*;

import com.mindsmiths.armory.event.UserConnectedEvent
import com.mindsmiths.armory.event.SubmitEvent
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.pairingalgorithm.Days;
import com.mindsmiths.pairingalgorithm.EmployeeAvailability;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
 
import agents.Ava;
import agents.CultureMaster;

import signals.EmployeeAvailabilitySignal;
import signals.SendMatchesSignal;
import signals.EmployeeConnectionStrengthsSignal;
import signals.SendNoMatchesSignal;

import models.AvaLunchCycleStage;
import models.OnboardingStage;
import models.WeeklyCoreTemplates;
import models.LunchCycleData
import com.mindsmiths.employeeManager.employees.Employee;


rule "Create Lunch Cycle data"
    when
        agent: Ava(onboarded == true, availabilityInterval == true)
        not LunchCycleData()
    then
        modify(agent) {
            decayConnectionNeurons()
        };
        insert(new LunchCycleData());
end

rule "Delete lunch cycle data"
    when
        Ava(availabilityInterval == false)
        lunchCycleData: LunchCycleData()
    then
        delete(lunchCycleData);
end

rule "Send available days email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(workingHours == true, onboarded == true)
        lunchCycleData: LunchCycleData(canSendMail == true, userResponded == false, count: mailsSent)
        employee: Employee()
    then
        agent.sendEmail(WeeklyCoreTemplates.weeklyEmail(employee, count, agent.getConnection("armory"),
                                                        agent.getConnection("email")));
        modify(lunchCycleData){
            setAvailableDaysEmailLastSentAt(ts),
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setMailsSent(count + 1)
        }
end

rule "Ask for available days"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(availabilityInterval: availabilityInterval)
        employee: Employee()
        lunchCycleData: LunchCycleData(userResponded == false, lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                                       availabilityInterval == true)
    then
        agent.showScreen(WeeklyCoreTemplates.availableDaysScreen());
        delete(signal);
end

rule "User selected days"
    when
        signal: SubmitEvent(getParamAsString("submit") == "confirmDays",
                            availableDays : signal.getParam("availableDays")) from entry-point "signals"
        agent: Ava()
        employee: Employee()
        lunchCycleData: LunchCycleData()
    then
        modify(lunchCycleData){
            updateAvailableDays(availableDays)
        }
        delete(signal);
end

rule "Confirm days"
    when
        lunchCycleData: LunchCycleData(availableDays != null, availableDays.size() > 0, availableDays: availableDays,
                                       userResponded == false)
        agent: Ava(connectionStrengths: getConnectionStrengthAsValue())
        employee: Employee()
    then
        agent.showScreens("confirmDaysScreen", WeeklyCoreTemplates.confirmingDaysScreen());

        modify(lunchCycleData){
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setUserResponded(true)
        }
        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(new EmployeeAvailability(employee.getId(), availableDays)));
        agent.send(CultureMaster.ID, new EmployeeConnectionStrengthsSignal(employee.getId(), agent.getConnectionStrengthAsValue()));
end

rule "No days selected"
    when
        lunchCycleData: LunchCycleData(availableDays != null, availableDays.size() == 0)
        agent: Ava()
        lunchCycleData: LunchCycleData()
    then
        agent.showScreens("LunchDecline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
end

rule "Lunch decline reason screen"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-lunch-decline-reason-screen") from entry-point "signals"
        agent: Ava(availabilityInterval: availabilityInterval)
        lunchCycleData: LunchCycleData(userResponded == false, lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                                       availabilityInterval == true)
    then 
        agent.showScreens("LunchDecline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
        delete(signal);
end

rule "Finish lunch decline form"
   when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: SubmitEvent(getParamAsString("submit") == "finished-lunch-decline-form") from entry-point "signals"
        agent: Ava(lunchDeclineReasons : lunchDeclineReasons)
        lunchCycleData: LunchCycleData(userResponded == false)
   then
        lunchDeclineReasons.put(signal.getParamAsString("answer"), ts);
        delete(lunchCycleData);
        delete(signal);
end

rule "Store match info"
    when
        signal: SendMatchesSignal(match: match, matchDay : matchDay) from entry-point "signals"
        agent: Ava()
        employee: Employee()
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        modify(lunchCycleData) {
            setMatch(match),
            setMatchDay(matchDay)};
        modify(agent){chargeAfterMatch(match)}
        agent.sendEmail(WeeklyCoreTemplates.calendarInviteEmail(matchDay, employee,
                                                    agent.getOtherEmployees().get(agent.employeeToAvaId(match))));
        delete(signal);
end

rule "Send no match email"
    when
        signal: SendNoMatchesSignal() from entry-point "signals"
        agent: Ava()
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        agent.sendEmail(WeeklyCoreTemplates.noMatchEmail(agent.getConnection("email")));
        delete(signal);
end

rule "Auto assign days"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 15-16 ? * FRI *", ts, "Europe/Zagreb"))//
        agent: Ava()
        employee: Employee()
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                                       userResponded == false, availableDays == null, availableDays: availableDays)
    then
        modify(lunchCycleData){
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setAvailableDays(Arrays.asList(Days.values())),
            setUserResponded(true)}

        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(new EmployeeAvailability(employee.getId(), availableDays)));
        agent.send(CultureMaster.ID, new EmployeeConnectionStrengthsSignal(employee.getId(), agent.getConnectionStrengthAsValue()));
end


rule "User already declined or confirmed available days"
    when 
        signal: UserConnectedEvent(getParamAsString("trigger") in ("start-lunch-decline-reason-screen", "start-weekly-core")) from entry-point "signals"
        agent: Ava()
        lunchCycleData: LunchCycleData(userResponded == true, availableDays != null)
    then
        agent.showScreen(WeeklyCoreTemplates.userAlreadyRespondedScreen());
        delete(signal);
end

rule "Lunch invite expired"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(availabilityInterval == false)
        not LunchCycleData()
    then 
        agent.showScreen(WeeklyCoreTemplates.lunchInviteExpiredScreen());
        delete(signal);
end