package rules.ava;

import java.util.*;

import com.mindsmiths.armory.events.UserConnectedEvent
import com.mindsmiths.armory.events.SubmitEvent
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.pairingalgorithm.Days;
import com.mindsmiths.pairingalgorithm.EmployeeAvailability;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
 
import agents.Ava;
import agents.CultureMaster;

import signals.EmployeeAvailabilitySignal;
import signals.SendMatchesSignal;
import signals.EmployeeConnectionStrengthsSignal;
import signals.SendNoMatchesSignal;

import models.AvaLunchCycleStage;
import models.OnboardingStage;
import models.LunchReminderStage;
import models.EmployeeProfile;
import models.WeeklyCoreTemplates;
import models.LunchCycleData;


rule "Create Lunch Cycle data"
    when
        agent: Ava(onboardingStage == OnboardingStage.FINISHED, availabilityInterval == true)
        not LunchCycleData()
    then
        insert(new LunchCycleData());
end

rule "Send available days email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(workingHours == true)
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING, 
                                      (evaluateCronExpression("* * * ? * WED *", ts, "Europe/Zagreb") || manualTrigger == true),
                                      (availableDaysEmailLastSentAt == null || availableDaysEmailLastSentAt before[12h] ts))
        employee: EmployeeProfile()
    then
        SendEmailPayload email = WeeklyCoreTemplates.weeklyEmail(
                employee,
                lunchCycleData.getLunchReminderStage(),
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);

        modify(lunchCycleData){
            setAvailableDaysEmailLastSentAt(ts),
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.FIRST_EMAIL_SENT)};
end

rule "Send second reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * THU *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours == true)
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData(
            (lunchReminderStage == LunchReminderStage.FIRST_EMAIL_SENT || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            (availableDaysEmailLastSentAt == null || availableDaysEmailLastSentAt before[12h] ts)
        )
    then
        modify(lunchCycleData){
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.SECOND_EMAIL_SENT),
            setAvailableDaysEmailLastSentAt(ts)};
        SendEmailPayload email = WeeklyCoreTemplates.weeklyEmail(
            employee,
            lunchCycleData.getLunchReminderStage(),
            agent.getConnection("armory"),
            agent.getConnection("email"));
        agent.sendEmail(email);
end

rule "Send third reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 0-14 ? * FRI *", ts, "Europe/Zagreb"))
        agent: Ava(workingHours == true)
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData(
            (lunchReminderStage == LunchReminderStage.SECOND_EMAIL_SENT || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            (availableDaysEmailLastSentAt == null || availableDaysEmailLastSentAt before[12h] ts)
        )
    then
        modify(lunchCycleData){
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.THIRD_EMAIL_SENT),
            setAvailableDaysEmailLastSentAt(ts)};
        SendEmailPayload email = WeeklyCoreTemplates.weeklyEmail(
                employee,
                lunchCycleData.getLunchReminderStage(),
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);
end

rule "Ask for available days"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(availabilityInterval: availabilityInterval)
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData(
            lunchReminderStage != LunchReminderStage.USER_RESPONDED,
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            (availabilityInterval == true || manualTrigger == true)
        )

    then
        agent.showScreen(WeeklyCoreTemplates.availableDaysScreen());
        modify(agent) {
            decayConnectionNeurons()};
        delete(signal);
end

rule "Reconnect ask for available days"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(availabilityInterval: availabilityInterval)
        lunchCycleData: LunchCycleData(
            lunchReminderStage != LunchReminderStage.USER_RESPONDED,
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            (availabilityInterval == true || manualTrigger == true)
        )
    then
        agent.showScreen(WeeklyCoreTemplates.availableDaysScreen());
        delete(signal);
end

rule "Confirm days"
    when
        signal: SubmitEvent(getParamAsString("submit") == "confirmDays") from entry-point "signals"  
        agent: Ava()
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData()
    then
        List<String> availableDays = (ArrayList<String>)signal.getParam("availableDays");
        if(availableDays.size() > 0) {
            agent.showScreens("confirmDaysScreen", new WeeklyCoreTemplates().confirmingDaysScreen());

            modify(lunchCycleData){
                setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
                setLunchReminderStage(LunchReminderStage.USER_RESPONDED),
                updateAvailableDays(availableDays),
                setManualTrigger(false)}
            agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(
                new EmployeeAvailability(employee.getId(), lunchCycleData.getAvailableDays())));
            agent.send(CultureMaster.ID, new EmployeeConnectionStrengthsSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue()));
        }
        else
            agent.showScreens("LunchDecline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
        delete(signal);
end

rule "Lunch decline reason screen"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-lunch-decline-reason-screen") from entry-point "signals"
        agent: Ava(availabilityInterval: availabilityInterval)
        lunchCycleData: LunchCycleData(
            lunchReminderStage != LunchReminderStage.USER_RESPONDED,
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
             (availabilityInterval == true || manualTrigger == true)
        )
    then 
        agent.showScreens("LunchDecline", WeeklyCoreTemplates.lunchDeclineReasonScreens());
        delete(signal);
end

rule "Finish lunch decline form"
   when
        Heartbeat(ts: timestamp) from entry-point "signals"
        signal: SubmitEvent(getParamAsString("submit") == "finished-lunch-decline-form") from entry-point "signals"
        agent: Ava(lunchDeclineReasons : lunchDeclineReasons)
        lunchCycleData: LunchCycleData(lunchReminderStage != LunchReminderStage.USER_RESPONDED)
   then
        lunchDeclineReasons.put(ts,signal.getParamAsString("answer"));
        modify(lunchCycleData){
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED),
            setManualTrigger(false)}
        delete(signal);
end

rule "Store match info"
    when
        signal: SendMatchesSignal(match: match, matchDay : matchDay) from entry-point "signals"
        agent: Ava()
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        modify(lunchCycleData) {
            setMatch(match),
            setMatchDay(matchDay)};
        modify(agent){chargeAfterMatch(match)}
        agent.printMatchInfo(employee, signal);
        SendEmailPayload email = WeeklyCoreTemplates.calendarInviteEmail(
                matchDay,
                employee, 
                agent.getOtherEmployees().get(agent.employeeToAvaId(match)));
        agent.sendEmail(email);
        delete(signal);
end

rule "Send no match email"
    when
        signal: SendNoMatchesSignal() from entry-point "signals"
        agent: Ava()
        lunchCycleData: LunchCycleData(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        SendEmailPayload email = WeeklyCoreTemplates.noMatchEmail(agent.getConnection("email"));
        agent.sendEmail(email);
        delete(signal);
end

rule "Auto assign days"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 15-16 ? * FRI *", ts, "Europe/Zagreb"))//
        agent: Ava()
        employee: EmployeeProfile()
        lunchCycleData: LunchCycleData(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED
        )

    then
        modify(lunchCycleData){
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED),
            setManualTrigger(false),
            setAvailableDays(Arrays.asList(Days.values()))}
        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(
                new EmployeeAvailability(employee.getId(), lunchCycleData.getAvailableDays())));
        agent.send(CultureMaster.ID, new EmployeeConnectionStrengthsSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue()));
end

rule "Delete lunch cycle data"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * SUN *", ts, "Europe/Zagreb"))
        lunchCycleData: LunchCycleData(lunchCycleStage != AvaLunchCycleStage.LUNCH_MAIL_SENDING)
    then
        delete(lunchCycleData);
end

rule "User already declined or confirmed available days"
    when 
        signal: UserConnectedEvent(getParamAsString("trigger") in ("start-lunch-decline-reason-screen", "start-weekly-core")) from entry-point "signals"
        agent: Ava()
        lunchCycleData: LunchCycleData(lunchReminderStage == LunchReminderStage.USER_RESPONDED)
    then
        agent.showScreen(WeeklyCoreTemplates.userAlreadyRespondedScreen());
        delete(signal);
end

rule "Lunch invite expired"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            onboardingStage == OnboardingStage.FINISHED,
            availabilityInterval == false
        )
        lunchCycleData: LunchCycleData(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            manualTrigger == false
        )
    then 
        agent.showScreen(WeeklyCoreTemplates.lunchInviteExpiredScreen());
        delete(signal);
end