package rules.ava;

import java.util.*;

import com.mindsmiths.armory.events.UserConnectedEvent
import com.mindsmiths.armory.events.SubmitEvent
import com.mindsmiths.ruleEngine.model.Heartbeat;
import com.mindsmiths.ruleEngine.util.Agents;
import com.mindsmiths.pairingalgorithm.Days;
import com.mindsmiths.pairingalgorithm.EmployeeAvailability;

import static com.mindsmiths.ruleEngine.util.DateUtil.evaluateCronExpression;
 
import agents.Ava;
import agents.CultureMaster;

import signals.EmployeeAvailabilitySignal;
import signals.SendMatchesSignal;
import signals.MatchingParametersSignal;
import signals.SendNoMatchesSignal;

import models.AvaLunchCycleStage;
import models.OnboardingStage;
import models.LunchReminderStage;
import models.EmployeeProfile;
import models.WeeklyCoreTemplates;
import models.LunchCycleData;

rule "Send available days email"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING,
                   onboardingStage == OnboardingStage.FINISHED)
        eval(evaluateCronExpression("* * 8-17 ? * WED *", ts, "Europe/Zagreb")
            || (agent.isManualTrigger() == true))
        employee: EmployeeProfile()
    then
        SendEmailPayload email = new WeeklyCoreTemplates().weeklyEmail(
                employee,
                agent.getLunchReminderStage(),
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.FIRST_EMAIL_SENT),
            setAvailableDaysEmailLastSentAt(ts)};
end

rule "Send second reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * * ? * THU *", ts, "Europe/Zagreb"))
        agent: Ava(
            (lunchReminderStage == LunchReminderStage.FIRST_EMAIL_SENT 
                    || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            workingHours == true,
            (availableDaysEmailLastSentAt == null || availableDaysEmailLastSentAt before[12h] ts),
            isManualTrigger() == false)
        employee: EmployeeProfile() 
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.SECOND_EMAIL_SENT)};
        SendEmailPayload email = new WeeklyCoreTemplates().weeklyEmail(
                employee,
                agent.getLunchReminderStage(),
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);
end

rule "Send third reminder"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 0-14 ? * FRI *", ts, "Europe/Zagreb"))
        agent: Ava(
            (lunchReminderStage == LunchReminderStage.SECOND_EMAIL_SENT 
                || lunchCycleStage == AvaLunchCycleStage.LUNCH_MAIL_SENDING),
            workingHours == true,
            (availableDaysEmailLastSentAt == null || availableDaysEmailLastSentAt before[12h] ts),
            isManualTrigger() == false)
        employee: EmployeeProfile()
    then
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.FIND_AVAILABILITY),
            setLunchReminderStage(LunchReminderStage.THIRD_EMAIL_SENT)};
        SendEmailPayload email = new WeeklyCoreTemplates().weeklyEmail(
                employee,
                agent.getLunchReminderStage(),
                agent.getConnection("armory"),
                agent.getConnection("email"));
        agent.sendEmail(email);
end

rule "Ask for available days"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED,
            (availabilityInterval == true || manualTrigger == true))
        employee: EmployeeProfile()
    then
        agent.showScreen(new WeeklyCoreTemplates().availableDaysScreen());
        modify(agent) {
            decayConnectionNeurons(),
            setManualTrigger(false)};
        delete(signal);
end

rule "Reconnect ask for available days"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED,
            (availabilityInterval == true || manualTrigger == true))
    then
        agent.showScreen(new WeeklyCoreTemplates().availableDaysScreen());
        delete(signal);
end

rule "Confirm days"
    when
        signal: SubmitEvent(getParamAsString("submit") == "confirmDays") from entry-point "signals"  
        agent: Ava()
        employee: EmployeeProfile()
    then
        List<String> availableDays = (ArrayList<String>)signal.getParam("availableDays");
        if(availableDays.size() > 0) {
            LunchCycleData lunchCycleData = new LunchCycleData(Utils.randomGenerator());
            lunchCycleData.updateAvailableDays(availableDays);
            insert(lunchCycleData);
            agent.showScreens("confirmDaysScreen", new WeeklyCoreTemplates().confirmingDaysScreen());
            modify(agent) {
                setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
                setLunchReminderStage(LunchReminderStage.USER_RESPONDED)};
            agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(
                new EmployeeAvailability(employee.getId(), lunchCycleData.getAvailableDays())));
            agent.send(CultureMaster.ID, new MatchingParametersSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue(),
                agent.getMatchHistory()));
        }
        else
            agent.showScreens("LunchDecline", new WeeklyCoreTemplates().lunchDeclineReasonScreens());
        delete(signal);
end

rule "Lunch decline reason screen"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-lunch-decline-reason-screen") from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
                   lunchReminderStage != LunchReminderStage.USER_RESPONDED)
    then 
        agent.showScreens("LunchDecline", new WeeklyCoreTemplates().lunchDeclineReasonScreens());
        delete(signal);
end

rule "Finish lunch decline form"
   when
        signal: SubmitEvent(getParamAsString("submit") == "finished-lunch-decline-form") from entry-point "signals"
        agent: Ava(lunchReminderStage != LunchReminderStage.USER_RESPONDED, lunchDeclineReasons : lunchDeclineReasons)
   then
        lunchDeclineReasons.add(signal.getParamAsString("answer"));
        agent.setLunchReminderStage(LunchReminderStage.USER_RESPONDED);
        update(agent);
        delete(signal);
end

rule "Store match info"
    when
        signal: SendMatchesSignal(match: match, matchDay : matchDay) from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
        employee: EmployeeProfile()
        data: LunchCycleData()
    then
        modify(agent) {getMatchHistory().add(match)};
        modify(data) {
            setMatch(match),
            setMatchDay(matchDay)};
        agent.printMatchInfo(employee, signal);
        SendEmailPayload email = new WeeklyCoreTemplates().calendarInviteEmail(
                matchDay,
                employee, 
                agent.getOtherEmployees().get(agent.employeeToAvaId(match)));
        agent.sendEmail(email);
        delete(signal);
end

rule "Send no match email"
    when
        signal: SendNoMatchesSignal() from entry-point "signals"
        agent: Ava(lunchCycleStage == AvaLunchCycleStage.ACCEPT_MATCH_INFO)
    then
        SendEmailPayload email = new WeeklyCoreTemplates().noMatchEmail(agent.getConnection("email"));
        agent.sendEmail(email);
        delete(signal);
end

rule "Auto assign days"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 15-16 ? * FRI *", ts, "Europe/Zagreb"))//
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            lunchReminderStage != LunchReminderStage.USER_RESPONDED)
        employee: EmployeeProfile(active == true)
    then
        LunchCycleData lunchCycleData = new LunchCycleData(
                Utils.randomGenerator(),
                Arrays.asList(Days.values()));
        insert(lunchCycleData);
        modify(agent) {
            setLunchCycleStage(AvaLunchCycleStage.ACCEPT_MATCH_INFO),
            setLunchReminderStage(LunchReminderStage.USER_RESPONDED)};
        agent.send(CultureMaster.ID, new EmployeeAvailabilitySignal(
                new EmployeeAvailability(employee.getId(), lunchCycleData.getAvailableDays())));
        agent.send(CultureMaster.ID, new MatchingParametersSignal(
                employee.getId(),
                agent.getConnectionStrengthAsValue(),
                agent.getMatchHistory()));
end

rule "Delete lunch cycle data"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * SUN *", ts, "Europe/Zagreb"))
        data: LunchCycleData()
    then
        delete(data);
end

rule "Reset Ava lunch cycle stage"
    when
        Heartbeat(ts: timestamp) from entry-point "signals"
        eval(evaluateCronExpression("* * 8-17 ? * SUN *", ts, "Europe/Zagreb"))
        agent: Ava(lunchCycleStage != AvaLunchCycleStage.LUNCH_MAIL_SENDING)
    then
        modify(agent) {setLunchCycleStage(AvaLunchCycleStage.LUNCH_MAIL_SENDING)};
end

rule "User already declined or confirmed available days"
    when 
        signal: UserConnectedEvent(getParamAsString("trigger") in ("start-lunch-decline-reason-screen", "start-weekly-core")) from entry-point "signals"
        agent: Ava(lunchReminderStage == LunchReminderStage.USER_RESPONDED)
    then
        agent.showScreen(new WeeklyCoreTemplates().userAlreadyRespondedScreen());
        delete(signal);
end

rule "Lunch invite expired"
    when
        signal: UserConnectedEvent(getParamAsString("trigger") == "start-weekly-core") from entry-point "signals"
        agent: Ava(
            lunchCycleStage == AvaLunchCycleStage.FIND_AVAILABILITY,
            onboardingStage == OnboardingStage.FINISHED,
            manualTrigger == false,
            availabilityInterval == false)
    then 
        agent.showScreen(new WeeklyCoreTemplates().lunchInviteExpiredScreen());
        delete(signal);
end